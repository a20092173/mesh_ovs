# mesh_ovs
mesh metwork with ovs openflow controller

    这四个文件均为pox控制器程序，目的是为了实现mesh网络（batman.adv协议）和openflow（ovs实现的交换机）的结合，根据mesh网络提供的无线网络信息，给openflow的控制策略提供依据（选择路由路径等等）；
    传统mesh网络路由协议自己会选择路由，如有三个路由器，均在mesh网络里且两两都在对方的中继范围内，此时如果在两个交换机之间传数据，mesh网络是不会经过第三个交换机进行中继的，而加入openflow之后就可以任意控制数据的路径（通过设置下一跳交换机的bat0端口的mac为目的mac，相当于在无线中继中指定下一跳的地址），下面四个程序只是做了一个简单的实现，

文件：
1：在_handle_PacketIn()函数内修改，在内部加入一个change()函数，简单给定一个路径path
testlearning.py:根据l2_learning程序改编，给一个指定的路径，控制交换机之间的联通
testmulti_eventdpid.py:根据packin内对应事件的dpid来下发流表
testmulti_switches.py:根据字典switches来向交换机发流表


2：根据multi程序改编，自己定义事件，添加listener，触发事件。

（1）：简单给定一个路径path，和bat0的mac表bat0_mac，控制路径
test_mesh_base.py(first commit):当开始启动程序，和l2_multi程序运行结果一样，只在两个交换机之间传数据，不经过第三个交换机中继，当80s过去,run()函数启动，触发MeshInstallpath事件，50002端口的数据就从第三个交换机中继过去，且每经过一个交换机，源和目的mac地址都改变
test_mesh_base.py(second commit):删除MeshInstallpath事件中的参数source。

（2）：路径path不确定，根据两点之间所有路径中的每条路径的最差一个链路的信道状况(字典channel)来确定两点之间的路径path，每一个路径对应一个mesh_groupid，每多一个路径mesh_groupid加

1,globle_group[mesh_groupid]存放每一个路径的事件处理类(Mesh()类)的对象。
##test_mesh_adv.py(first commit):
    匹配源ip和目的ip和udp，修改下一跳mac地址，当有一条新的路生成的时候都会触发一次MeshInstallpath事件，进入事件处理函数，下发流表，流表一旦生产便会一直保持下去，下一步工作就是对这个进行完善。
    mesh_paths为：mesh_path = {1:[srcmac , (0 , 4)],2:[8,(4,6)],3:[7,(6,6)],4:[9,(6,3)],5:[aimmac,(3,0)]}，mesh_paths为：{1：{1:[srcmac , (0 , 4)],2:[8,(4,6)],3:[7,(6,6)],4:[9,(6,3)],5:[aimmac,(3,0)]}，2：{1:[aimmac , (0 , 3)],2:[9,(3,6)],3:[7,(6,6)],4:[8,(6,4)],5:[srcmac,(4,0)]}}

2:修改了mesh_path的格式，l2_multi原本的install_path()替换为了raise()：
##test_mesh_raise.py(first commit):
    匹配源mac，不修改源mac，只修改目的mac和端口号，这样一个主机只能向一个主机发送数据，向多个主机发送数据时路径选择会有问题。
    mesh_path格式改为：{IPAddr('10.0.0.60'): {IPAddr('10.0.0.50'): {1: [8, (4, 6)], 2: [7, (6, 6)], 3: [9, (6, 3)]}}}（源ip：目的ip：交换机路径），mesh_paths为：{IPAddr('10.0.0.50'): {IPAddr('10.0.0.60'): {1: [9, (3, 6)], 2: [7, (6, 6)], 3: [8, (6, 4)]}}, IPAddr('10.0.0.60'): {IPAddr('10.0.0.50'): {1: [8, (4, 6)], 2: [7, (6, 6)], 3: [9, (6, 3)]}}}。
    l2_multi原本建立路径下发流表的install_path()替换为了raise()，也就是触发自己设计的事件，能互相ping通，视频可以互传，流表生成后就一直都存在
  
！！！！！！！！！！！！！！！！！！！！！！    
3: 将l2_multi的install_path() 的选路算法_get_path()换成了自己设计的选路算法，同时修改目的mac，使得从一开始的icmp arp包就可以根据自己设计的路径传输，相当于一个基础的无线情景下的pox程序 
###test_mesh_betta.py(first commit): 
    自己设计路径，因为要修改目的mac，所以不匹配目的mac地址;
    可以根据channel的变化自适应的改变路径和流规则  （做过实验，可行！！定时改变channel的值，流表改变）

！！！chennel值是从交换机获得    
###tmesh_betta_adv.py(first commit):   
    channel根据交换机发来的数据（每5s发一次）在控制器里面得到，控制器link detected必须全部结束！！！不然会报错。最好是先启动pox，等link detected全结束之后再在交换机启动脚本  sh channel_iw.sh & , 这样link detected比较容易全部结束。
    在所有交换机全连接上以后，自己设计个初始的init_channel,信道条件都为1，即只根据跳数来确定路径，当根据交换机发来的数据得到的channel不符合数据规则的时候，就用init_channel代替
    可以根据channel的变化自适应的改变路径和流规则 （没做过实验，理论上肯定可行）
    删掉了一些没用的找路的函数
    
###tmesh_betta_adv.py(second commit):   
    删除了全局的init_channel，替代为函数initchannel() ，因为channel是逐个改变的，所以初始信道条件改为100,即初始时各交换机之间质量都很差，信道越小，质量越好 
    增加了两个功能：
    （1）：当交换机加入或者退出pox时（两种情况，一种是交换机一直给控制器发送iw channel信息，一种是交换机什么都不发），两种情况都会重新初始化channel（解决办法：通过增加判断函数initial_channel()实现）；但退出这个情况下的不能成功，因为就算交换机退出，但是switches里面相应的dpid也不会被删除，这个后面解决。
    （2）：交换机个数不变，交换机之间距离改变，可能会使得两个交换机之间联通不了，（解决办法：对应初始值channel，每来一个信息，改变一次，没有的还是初始值）
    
###tmesh_betta_adv.py(third commit):  ./pox.py forwarding.tmesh_betta_adv openflow.discovery --link-timeout=120  （ovs的盒子不需要openflow.keepalive加这个命令，pantou的则需要加上这个命令）
    ！！！之前的改变iw包来获取channel值的方法在wndr4300上有问题，交换机重启后无线就坏掉了，所以抛弃该方案   
    这里channel值是根据自己写的程序和脚本来实现，不是之前的根据改变iw包来实现，所以不需要担心重启后无线会坏掉。
    将交换机信道情况，dpid，和bat0的mac地址分别存到三个txt文件里scan.txt, dpid.txt , ifconfig.txt , 进行相应的匹配，找出需要的数据。所用到的处理程序为handle.c ，实现功能：从三个txt文件里面提取相应数据，并且将数据传送给控制器。要编译能在openwrt下运行的c程序；生成在openwrt下的可执行文件openwrthandle，需要指定控制器的ip。
    将这些步骤写道脚本channel_iw.sh里面，等10s发一次数据给pox，等pox程序的link discovery运行结束时在所有交换机内启动脚本。控制器里面的bat0的mac现在不是一开始就知道的，要从接收到的信息里学习到，命令为： sh channel_iw.sh &
    注意：channel_iw.sh和可执行文件openwrthandle要拷入在openwrt的同一个目录下
    
###tmesh_noadj_multi.py(first commit):  ./pox.py forwarding.tmesh_noadj_multi
    ！！！思路：没有链路发现模块，根据一定方法生成mac_map和adjacency，在两个主机srcmac和dstmac地址之间找路径，规定交换机和交换机直接都是用6号端口连接（之前有链路发现模块时候，是可以将有线的连接加入的），只能应用于交换机直接是无线连接的环境，因此只要找到路径上的交换机和两个端点交换机连接到主机的端口就可以把整个链路建立起来。
    模仿l2_multi，但是不需要链路发现，交换机内的程序可以在控制器没启动之前先跑起来，不会有任何影响，adjacency是根据channel得到的，和map_map根据macToPort得到（注意一些地方需要global，全局变量）。当map_map的数据得到完全之后两个主机之间就可以根据自己的策略建立路径了。存在问题：1.当客户端从一个交换机迁移到另外一个交换机，或者迁移到这个交换机的另外一个端口的时候，两个主机就不通了（原因估计是map_map不一定会更新）2.实现交换机直接无线连接和有线连接可以同时用的场景，即交换机和交换机之间连接的端口不是设定固定值6.
